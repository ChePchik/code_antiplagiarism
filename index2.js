const fs = require("fs");
const esprima = require("esprima");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞
function normalizeCode(code) {
	const ast = esprima.parseScript(code, { range: true });

	let id = 0;
	const identifiersMap = {};

	const replaceIdentifiers = (node) => {
		if (node.type === "Identifier") {
			if (!identifiersMap[node.name]) {
				identifiersMap[node.name] = `var${id++}`;
			}
			node.name = identifiersMap[node.name];
		}

		for (let key in node) {
			if (node.hasOwnProperty(key) && typeof node[key] === "object" && node[key] !== null) {
				replaceIdentifiers(node[key]);
			}
		}
	};

	replaceIdentifiers(ast);

	return ast;
}

// –ß—Ç–µ–Ω–∏–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤—É—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–¥–∞
const code1 = fs.readFileSync("code1.js", "utf8");
const code2 = fs.readFileSync("code2.js", "utf8");

const normalizedAst1 = normalizeCode(code1);
const normalizedAst2 = normalizeCode(code2);

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö AST
const areSimilar = JSON.stringify(normalizedAst1) === JSON.stringify(normalizedAst2);
console.log("üöÄ ~ normalizedAst2:", normalizedAst2);
console.log("üöÄ ~ normalizedAst1:", normalizedAst1);

if (areSimilar) {
	console.log("–ö–æ–¥—ã –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏ –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã (–≤–æ–∑–º–æ–∂–µ–Ω –ø–ª–∞–≥–∏–∞—Ç).");
} else {
	console.log("–ö–æ–¥—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è.");
}
